1.1 The deque module is part of which python library? 
Collections library



1.2 What are 2 differences that distinguish a tree from a graph?
a. Cycles:
Tree: Trees don't have cycles. There's only one path between any two points, with no loops.
Graph: Graphs can have cycles. You can start at one point and follow a path that leads back to where you started.
b. Hierarchy:
Tree: Trees have a clear hierarchy. There's a top node called the root, and every other node has one parent (except the root).
Graph: Graphs don't follow a hierarchy. Nodes can connect in any way, without a specific parent-child structure.



1.3 Give the definitions of time complexity and space complexity
Time Complexity is how much time an algorithm needs to run based on the size of the input. It shows how the time to complete the algorithm grows as the input gets bigger. It's not about the exact time it takes, but a way to describe how the steps required increase with the input size.
Space Complexity is how much memory an algorithm needs based on the size of the input. It measures the extra space the algorithm uses besides the space for the input. This includes memory used for variables, data structures, recursion call stacks, and any other additional memory the algorithm uses.



1.4 Describe the bubble sort algorithm and its complexity. What is guaranteed at the end of the first pass?
The bubble sort algorithm is a simple sorting algorithm that repeatedly swaps adjacent elements if they are in the wrong order, "bubbling" the largest elements up to the end of the array. Here's how it works:
1. Start at the beginning of the list.
2. Compare the first two elements. If the first is greater than the second, swap them.
3. Move to the next pair of elements, and repeat the comparison and swap if necessary.
4. Continue this process until the end of the list is reached. This completes one pass.
5. After each pass, the largest unsorted element will have "bubbled" to its correct position at the end of the list.
6. Repeat the process for the remaining unsorted portion of the list.
7. The algorithm stops when a pass through the list is completed without any swaps, indicating that the list is sorted.
Time complexity best case: O(n)
Time complexity average case: O(n^2)
Time complexity worst case: O(n^2)
Space complexity: O(1)
At the end of the first pass, the element with biggest value is guaranteed to be in its correct position at the end of the list.



1.5 Explain what LIFO and FIFO are and how each works in practice with a named data structure
LIFO stands for "Last In, First Out." It is a method of organizing and manipulating data where the most recently added item is the first one to be removed.
A stack is a data structure that follows the LIFO principle. Here's how it works in practice:
Push: Add an item to the top of the stack.
Pop: Remove the item from the top of the stack.
Peek: View the item on the top of the stack without removing it.

FIFO stands for "First In, First Out." It is a method of organizing and manipulating data where the first item added is the first one to be removed.
A queue is a data structure that follows the FIFO principle. Here's how it works in practice:
Enqueue: Add an item to the end of the queue.
Dequeue: Remove the item from the front of the queue.
Front: View the item at the front of the queue without removing it.

1.6 What is a Balanced Binary Tree and what would be the best root? Walkthrough how you search using this structure.
A Balanced Binary Tree is a type of binary tree where the height of the left and right subtrees of any node differ by at most one. This ensures that the tree remains approximately balanced, leading to more efficient operations like insertion, deletion, and searching.
In a balanced binary tree, the best root is the median value of the dataset being used to construct the tree. Choosing the median value ensures that the tree remains balanced, with roughly equal numbers of nodes on either side of the root.
How to search using this structure:
1. Start at the Root: Begin the search at the root of the tree.
2. Compare with the Root: Compare the target value with the value of the root node.
If the target value = the root's value, the search is successful.
If the target value < the root's value, move to the left child of the root.
If the target value > the root's value, move to the right child of the root.
3. Repeat: Continue the comparison process with the current node (either the left or right child, depending on the previous step) until you either find the target value or reach a leaf node.
4. Return Result: If the target value is found, return the node or the value. If a leaf node is reached and the target value is not found, the search is unsuccessful, and the target value is not in the tree.
